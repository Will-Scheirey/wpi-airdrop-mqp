clear; clc; close all;
addpath("Parachute_Utils/", "Objects/", "Kinematics/", "Dynamic_Models/")

% ========================
% --- Physical Objects ---
% ========================

payload = SphereObject(10, 0.5);
parachute = Parachute_Rigid_Hemi(2, 2, 1.225, 3);

% --- Parachute ---


% ==========================
% --- Initial Conditions ---
% ==========================

P0   = [0; 0; 1000];    % ECEF Position      [m]
V_b0 = [0; 0; 0];       % Body velocities    [m   s^-1]
eul_b0 = [0; 0; 0];
w_b0 = [0; 0; 0];     % Body angular rates [rad s^-1]


P0_c = P0 + [3; 0; 3];
V_c0 = [0; 0; 0];    % Canopy ECEF body velocity
eul_c0 = [0; 0; 0];
w_c0 = [0; 0; 0];

x0   = [
    P0 + [0; 0; 0];
    V_b0;

    eul_b0;
    w_b0;

    P0_c;
    V_c0;

    eul_c0;
    w_c0;
    ];

[t, y] = ode45(@(t, y) basic_parachute_dynamic_model(t, y, payload, parachute), 0:0.01:20, x0);

%% Plotting

plot_data(t, y, true, false)

function plot_data(t, y, do_animation, save_video)

if do_animation
figure(1)
clf
run_animation(t, y, 4, 1, save_video)
end

figure(2)
clf
plot(t, y(:, 4), 'DisplayName', 'X', 'LineWidth', 1.5); hold on;
plot(t, y(:, 5), 'DisplayName', 'Y', 'LineWidth', 1.5);
plot(t, y(:, 6), 'DisplayName', 'Z', 'LineWidth', 1.5);
plot(t, vecnorm(y(:,4:6), 2, 2), 'LineWidth', 3, 'DisplayName', 'Speed')

legend;
title("Body Frame Velocity vs. Time");
xlabel("Time (s)")
ylabel("Velocity (m/s)");

figure(3)
clf
yyaxis left
plot(t, y(:, 1), 'DisplayName', 'X', 'LineWidth', 1.5); hold on
plot(t, y(:, 2), 'DisplayName', 'Y', 'LineWidth', 1.5)
ylabel("X, Y Position (m)")

yyaxis right
plot(t, y(:,3), 'DisplayName', 'Z', 'LineWidth', 1.5)
ylabel("Z Position (m)")

title("ECEF Position vs. Time")
xlabel("Time (s)")
legend

figure(4)
clf
plot3(y(:, 1), y(:, 2), y(:, 3))

lim = [-1,1]*40;

% xlim(y(1,1) + lim);
% ylim(y(1,2) + lim);
% zlim(y(1,3) + lim);

title("ECEF Trajectory")
xlabel("X")
ylabel("Y")
zlabel("Z")

figure(5)
clf
plot(t, y(:, 10), 'DisplayName', 'P', 'LineWidth', 1.5); hold on;
plot(t, y(:, 11), 'DisplayName', 'Q', 'LineWidth', 1.5)
plot(t, y(:, 12), 'DisplayName', 'R', 'LineWidth', 1.5)

xlabel("Time (s)")
ylabel("Angular Rate (rad/s)")
title("Angular Velocities vs. Time")
legend

figure(6)
clf
plot(t, y(:, 7), 'DisplayName', 'Y', 'LineWidth', 1.5); hold on;
plot(t, y(:, 8), 'DisplayName', 'Q', 'LineWidth', 1.5)
plot(t, y(:, 9), 'DisplayName', 'R', 'LineWidth', 1.5)

xlabel("Time (s)")
ylabel("Angular Rate (rad/s)")
title("Angular Velocities vs. Time")
legend



end

function run_animation(t, y, step, substep, save_video)
numsteps = height(y);

quat = quaternion(eul2quat(y(1, 7:9)));
patch = poseplot(quat);

% patch.ScaleFactor = 50;
xlabel("X")
ylabel("Y")
zlabel("Z")

if save_video
outputVideo = VideoWriter('myVideo.mp4', 'MPEG-4'); % Specify filename and format
open(outputVideo);
end

for i = 2:step:numsteps - step
    for j=i:substep:i+step
        quat = quaternion(eul2quat(y(j, 7:9)));
        pos = y(j, 1:3);
    
        set(patch, Orientation=quat, Position=pos); hold on
        plot3(pos(1), pos(2), pos(3), '.b', 'MarkerSize', 1); hold on
    end

    xlim(y(1,1) + [-1, 1]*10);
    ylim(y(1,2) + [-1, 1]*10);
    zlim(y(1,3) + [-5, 1]*10);

    set(gca,'ZDir','normal')  
    title(sprintf("t = %0.2f", t(i)))
    drawnow

    if save_video
    frame = getframe(gcf); % captures the current figure (gcf)
    
    writeVideo(outputVideo, frame);
    else
    % pause(0.05)
    end
end
if save_video
close(outputVideo)
end
end
